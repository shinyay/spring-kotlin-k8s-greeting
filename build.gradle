import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id 'org.springframework.boot' version '2.2.0.M3'
    id 'org.jetbrains.kotlin.jvm' version '1.3.31'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.3.31'
    id 'com.google.cloud.tools.jib' version '1.2.0'
}

apply plugin: 'io.spring.dependency-management'

group = 'io.pivotal.shinyay.simple'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/snapshot' }
    maven { url 'https://repo.spring.io/milestone' }
}

ext {
    set('springCloudVersion', 'Hoxton.BUILD-SNAPSHOT')
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'
    runtimeOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    implementation 'io.github.microutils:kotlin-logging:1.6.24'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

tasks.withType(KotlinCompile) {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict']
        jvmTarget = '1.8'
    }
}

jib {
    from {
        image = 'shinyay/adoptopenjdk11-minimum'
    }
    to {
        image = 'gcr.io/pa-syanagihara/hello-app'
//        credHelper = 'gcr'
        auth {
            username = 'oauth2accesstoken'
            password = 'gcloud auth print-access-token'.execute().text.trim()
        }
    }
    allowInsecureRegistries = true
    container {
        jvmFlags = ['-Xms512m', '-Xms1g', '-Xmx1g', '-Xss10m', '-XX:MaxMetaspaceSize=1g']
        jvmFlags = ['-Djava.security.egd=file:/dev/./urandom']
        jvmFlags = ['-Duser.timezone=JST']
        jvmFlags = ['-Xdebug']
        ports = ['8080']
        useCurrentTimestamp = true
    }
}
